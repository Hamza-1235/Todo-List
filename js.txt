const taskInput = document.querySelector('.task-input');
const descriptionInput = document.querySelector('.description-input');
const datetimeInput=document.querySelector('.datetime-input');
const addBtn = document.getElementById('btn');
const listContainer = document.querySelector('.list-to-do');
let currentTask = null;

// function newTask() {
//     const taskText = taskInput.value.trim();
//     const taskDescription = descriptionInput.value.trim();
//     const taskDateTime=datetimeInput.value.trim();

//     if (taskText !== "" && taskDateTime!=="") {
//         const taskContainer = document.createElement('div');
//         taskContainer.className = 'task-container';
  
//         const taskLabel = document.createElement('label');
//         taskLabel.className = 'task-label';
//         taskLabel.textContent = taskText;

//         const taskHeader = document.createElement('div');
//         taskHeader.className = 'task-header';

//         const iconContainer = document.createElement('div');
//         iconContainer.className = 'icon-container';
   
//         const descriptionLabel = document.createElement('div');
//         descriptionLabel.className = 'description-label';
//         descriptionLabel.textContent = taskDescription;

//         const dateTimeLabel = document.createElement('p');
//         dateTimeLabel.className = 'datetime-label';
//         dateTimeLabel.textContent = taskDateTime;

//         const [date, time] = taskDateTime.split('T');
//         dateTimeLabel.textContent = `${date} ${time}`;

//         const checkIcon = document.createElement('i');
//         checkIcon.className = 'fas fa-check check-icon';

//         const deleteIcon = document.createElement('i');
//         deleteIcon.className = 'fas fa-trash delete-icon';

//         const editIcon = document.createElement('i');
//         editIcon.className = 'fas fa-edit edit-icon';

//         iconContainer.appendChild(checkIcon);
//         iconContainer.appendChild(deleteIcon);
//         iconContainer.appendChild(editIcon);
//         taskHeader.appendChild(taskLabel);
//         taskHeader.appendChild(iconContainer);
//         taskContainer.appendChild(taskHeader);
//         taskContainer.appendChild(descriptionLabel);
//         taskContainer.appendChild(dateTimeLabel);
       
//         checkIcon.addEventListener('click', () => {
//             taskContainer.classList.toggle('completed');
//         });

//         deleteIcon.addEventListener('click', () => {
//             listContainer.removeChild(taskContainer);
//         });

//         editIcon.addEventListener('click', () => {
//             taskContainer.classList.add('edit');
//             taskInput.value = taskLabel.textContent;
//             descriptionInput.value = descriptionLabel.textContent;
//             datetimeInput.value=taskDateTime;
//             taskInput.focus();
//             currentTask = taskContainer; 
//         });

//         setReminder(taskText, taskDescription,taskDateTime);

//         listContainer.appendChild(taskContainer);
//         taskInput.value = '';
//         descriptionInput.value = '';
//         datetimeInput.value='';
//     }
// }

function saveTask() {
    if (currentTask) {
        const taskLabel = currentTask.querySelector('.task-label');
        const descriptionLabel = currentTask.querySelector('.description-label'); 
        const dateTimeLabel = currentTask.querySelector('.datetime-label'); 
        const newTask = taskInput.value.trim();
        const newDescription = descriptionInput.value.trim();
        const newDateTime=datetimeInput.value.trim();

        if (newTask !== "" && newDateTime!=="") {
            taskLabel.textContent = newTask;
            descriptionLabel.textContent = newDescription;
            dateTimeLabel.textContent = newDateTime;
            
            const [date, time] = newDateTime.split('T');
            dateTimeLabel.textContent = `${date} ${time}`;

            setReminder(newTask, newDescription, newDateTime);
            taskInput.value = "";
            descriptionInput.value = "";
            datetimeInput.value="";
            currentTask.classList.remove('edit');
            currentTask = null;
        }
    }
}

function setReminder(taskText, taskDescription,taskDateTime) {
    const currentDateTime = new Date();
    const taskDateTimeObject = new Date(taskDateTime);

    const timeDifference = taskDateTimeObject - currentDateTime;

    if (timeDifference > 0) {
        setTimeout(() => {
            showReminder(taskText, taskDescription);
        }, timeDifference);
    } else {
        console.log("Task time has already passed.");
    }
}

function showReminder(taskText, taskDescription) {
    const reminderNotification = document.getElementById("reminderNotification");
    const reminderText = document.getElementById('reminderText');

    reminderText.textContent = `Reminder: ${taskText}\nDescription: ${taskDescription}`;
    reminderNotification.style.display = 'block';

    reminderNotification.addEventListener('click',()=>{
        reminderNotification.style.display='none';
    });

    setTimeout(() => {
        reminderNotification.style.display = 'none';
    }, 20000);

}

addBtn.addEventListener('click', () => {
    if (currentTask) {
        saveTask();
    } else {
        newTask();
    }
});

taskInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        e.preventDefault();
        if (currentTask) {
            saveTask();
        } else {
            newTask();
        }
    }
});







    <script src="https://accounts.google.com/gsi/client" async defer onload="onGoogleScriptLoad()"></script>






const CLIENT_ID = '690374542473-2fh0ovjh1jpsl31jaqju1s635coombsq.apps.googleusercontent.com'; 
const API_KEY = 'AIzaSyBNutCBgEG6BLRNUZwO_6Bch2cjUPUv0kw';  
const DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];
const SCOPES = "https://www.googleapis.com/auth/calendar";

function handleCredentialResponse(response) {
    const credential = response.credential;
    const decodedToken = jwt_decode(credential);

    localStorage.setItem('currentUser', JSON.stringify(decodedToken));
    document.querySelector('.todo-list-container').style.display = 'block';
    document.getElementById('authModal').style.display = 'none';
}

function initGoogleSignIn() {
    google.accounts.id.initialize({
        client_id: '690374542473-2fh0ovjh1jpsl31jaqju1s635coombsq.apps.googleusercontent.com', 
        callback: handleCredentialResponse
    });
    google.accounts.id.renderButton(
        document.getElementById('g-signin2'),
        { theme: 'outline', size: 'large' }
    );
    google.accounts.id.prompt();
}

document.addEventListener('DOMContentLoaded', (event) => {
    initGoogleSignIn();
});

const taskInput = document.querySelector('.task-input');
const descriptionInput = document.querySelector('.description-input');
const datetimeInput = document.querySelector('.datetime-input');
const addBtn = document.getElementById('btn');
const listContainer = document.querySelector('.list-to-do');
let currentTask = null;

function newTask() {
    const taskText = taskInput.value.trim();
    const taskDescription = descriptionInput.value.trim();
    const taskDateTime = datetimeInput.value.trim();

    if (taskText !== "" && taskDateTime !== "") {
        const taskContainer = document.createElement('div');
        taskContainer.className = 'task-container';
        const taskLabel = document.createElement('label');
        taskLabel.className = 'task-label';
        taskLabel.textContent = taskText;
        const taskHeader = document.createElement('div');
        taskHeader.className = 'task-header';
        const iconContainer = document.createElement('div');
        iconContainer.className = 'icon-container';
        const descriptionLabel = document.createElement('div');
        descriptionLabel.className = 'description-label';
        descriptionLabel.textContent = taskDescription;
        const dateTimeLabel = document.createElement('p');
        dateTimeLabel.className = 'datetime-label';
        dateTimeLabel.textContent = taskDateTime;
        const [date, time] = taskDateTime.split('T');
        dateTimeLabel.textContent = `${date} ${time}`;
        const checkIcon = document.createElement('i');
        checkIcon.className = 'fas fa-check check-icon';
        const deleteIcon = document.createElement('i');
        deleteIcon.className = 'fas fa-trash delete-icon';
        const editIcon = document.createElement('i');
        editIcon.className = 'fas fa-edit edit-icon';
        iconContainer.appendChild(checkIcon);
        iconContainer.appendChild(deleteIcon);
        iconContainer.appendChild(editIcon);
        taskHeader.appendChild(taskLabel);
        taskHeader.appendChild(iconContainer);
        taskContainer.appendChild(taskHeader);
        taskContainer.appendChild(descriptionLabel);
        taskContainer.appendChild(dateTimeLabel);

        checkIcon.addEventListener('click', () => {
            taskContainer.classList.toggle('completed');
        });

        deleteIcon.addEventListener('click', () => {
            listContainer.removeChild(taskContainer);
        });

        editIcon.addEventListener('click', () => {
            taskContainer.classList.add('edit');
            taskInput.value = taskLabel.textContent;
            descriptionInput.value = descriptionLabel.textContent;
            datetimeInput.value = taskDateTime;
            taskInput.focus();
            currentTask = taskContainer; 
        });

        setReminder(taskText, taskDescription, taskDateTime);

        listContainer.appendChild(taskContainer);
        taskInput.value = '';
        descriptionInput.value = '';
        datetimeInput.value = '';
    }
}

function saveTask() {
    if (currentTask) {
        const taskLabel = currentTask.querySelector('.task-label');
        const descriptionLabel = currentTask.querySelector('.description-label'); 
        const dateTimeLabel = currentTask.querySelector('.datetime-label'); 
        const newTask = taskInput.value.trim();
        const newDescription = descriptionInput.value.trim();
        const newDateTime = datetimeInput.value.trim();

        if (newTask !== "" && newDateTime !== "") {
            taskLabel.textContent = newTask;
            descriptionLabel.textContent = newDescription;
            dateTimeLabel.textContent = newDateTime;
            
            const [date, time] = newDateTime.split('T');
            dateTimeLabel.textContent = `${date} ${time}`;

            setReminder(newTask, newDescription, newDateTime);
            taskInput.value = "";
            descriptionInput.value = "";
            datetimeInput.value = "";
            currentTask.classList.remove('edit');
            currentTask = null;
        }
    }
}

function setReminder(taskText, taskDescription, taskDateTime) {
    const currentDateTime = new Date();
    const taskDateTimeObject = new Date(taskDateTime);
    const timeDifference = taskDateTimeObject - currentDateTime;

    if (timeDifference > 0) {
        setTimeout(() => {
            showReminder(taskText, taskDescription);
        }, timeDifference);
    } else {
        console.log("Task time has already passed.");
    }
}

function showReminder(taskText, taskDescription) {
    const reminderNotification = document.getElementById("reminderNotification");
    const reminderText = document.getElementById('reminderText');

    reminderText.textContent = `Reminder: ${taskText}\nDescription: ${taskDescription}`;
    reminderNotification.style.display = 'block';

    reminderNotification.addEventListener('click', () => {
        reminderNotification.style.display = 'none';
    });

    setTimeout(() => {
        reminderNotification.style.display = 'none';
    }, 20000);
}

addBtn.addEventListener('click', () => {
    if (currentTask) {
        saveTask();
    } else {
        newTask();
    }
});

taskInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        e.preventDefault();
        if (currentTask) {
            saveTask();
        } else {
            newTask();
        }
    }
});

const authModal = document.getElementById('authModal');
const authForm = document.getElementById('authForm');
const authTitle = document.getElementById('authTitle');
const authSubmit = document.getElementById('authSubmit');
const toggleAuth = document.getElementById('toggleAuth');
const todoListContainer = document.querySelector('.todo-list-container');

let isLoginMode = true;
let users = JSON.parse(localStorage.getItem('users')) || {}; 

window.onload = function() {
    authModal.style.display = 'block';
};

toggleAuth.addEventListener('click', () => {
    isLoginMode = !isLoginMode;
    authTitle.textContent = isLoginMode ? 'Login' : 'Sign Up';
    authSubmit.textContent = isLoginMode ? 'Login' : 'Sign Up';
    toggleAuth.innerHTML = isLoginMode
        ? "Don't have an account? <a href='#'>Sign up</a>"
        : "Already have an account? <a href='#'>Login</a>";
});

authForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const username = document.getElementById('username').value.trim();
    const password = document.getElementById('password').value.trim();

    if (isLoginMode) {
        if (users[username] && users[username] === password) {
            alert('Login successful');
            authModal.style.display = 'none';
            todoListContainer.style.display = 'block';
        } else {
            alert('Invalid username or password');
        }
    } else {
        if (users[username]) {
            alert('Username already exists');
        } else {
            users[username] = password;
            localStorage.setItem('users', JSON.stringify(users));
            alert('Signup successful');
            isLoginMode = true;
            authTitle.textContent = 'Login';
            authSubmit.textContent = 'Login';
            toggleAuth.innerHTML = "Don't have an account? <a href='#'>Sign up</a>";
        }
    }
});

document.querySelector('.close').addEventListener('click', () => {
    authModal.style.display = 'none';
});
